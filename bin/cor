#!/usr/bin/env ruby
require_relative 'common'

require 'statsample'

e, m, c, v, x, y = false, :spearman, true, true, STDIN, nil

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<path>] [<path>]'
  use '[<options>] -e [<command>] [<command>]'
  opt 'e -e --eval'
  opt 'm -m --method=(pearson|spearman)'
  opt 'c -c --[no-]color'
  opt 'v -v --[no-]verbose'
  arg 'x [<x>]'
  arg 'y [<y>]'
end

AutoColor.disable on: self unless c

begin
  x = SafeEval::IO.read_with_safe_eval x, eval: e, as: Array
  y = SafeEval::IO.read_with_safe_eval y, eval: e, as: Array unless y.nil?

  x, y = x[0..(x.length / 2 - 1)], x[(x.length / 2)..-1] if y.nil? || y.empty?
  x, y = *[x, y].map { |u| u.inject([]) { |a, i| i.nil? || i.to_s.strip.empty? ? a : (a << i.to_f) }}
rescue Exception
  abort "Unable to process input -> #{$!}"
end

abort 'Input vectors mismatch' if x.length != y.length
abort 'Input vectors empty' if x.empty?

if v
  puts "#{'X'.blue}: #{x.length.to_s.yellow} -> #{x.to_s.yellow}"
  puts "#{'Y'.blue}: #{x.length.to_s.yellow} -> #{y.to_s.yellow}"
end

r = Statsample::Bivariate.send m.to_sym, Daru::Vector[x], Daru::Vector[y]

print "#{'C'.blue}: #{m.to_s.yellow} -> " if v
puts '%+.12f'.yellow % r
