#!/usr/bin/env ruby
require_relative 'common' and load_extise!

c, s, t, v, q, z, p = true, false, 80, true, false, false, [STDIN]

ARGV.bind! to: self do
  use '[<options>] [<file>...]'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  opt 'z -- --stat'
  arg 'p [<path>...]'
end

AutoColor.disable on: self unless c

include BugsEclipseOrg

i = v && !options.default?(:p) ? 1 : 0

p.each do |f|
  d = Nokogiri::XML File.open_or f

  puts "#{f.green}" unless q || i.zero?

  if z
    prop :history, d.root.attributes['Id'].text, i
    prop :events, d.css('InteractionEvent').count, i + 1
    next
  end

  bug_url = d.root.attributes['Id'].text.strip
  bugid = bug_url.match(/\d+\z/)[0]
  version = d.root.attributes['Version'].text.strip

  abort "Invalid URL: #{bug_url}".red if bug_url !~ /\Ahttps:\/\/bugs\.eclipse\.org\/bugs-\d+\z/
  abort "Invalid version: #{version}".red if version != '1'

  bug = Bug.where(bugid: bugid).first
  contexts = Attachment.where(bug: bug, filename: 'mylyn-context.zip')
  context = contexts.first

  abort "#{Bug}:#{bug_id} not found".red if bug.nil?
  abort "#{Bug}:#{bug_id} missing context" if contexts.count.zero?
  abort "#{Bug}:#{bug_id} various contexts" if contexts.count > 1

  d.css('InteractionEvent').each do |e|
    time = Time.parse(e.attributes['StartDate'].text).utc

    interaction = persist(Interaction, attachment_id: context.id, start_date: time, xml: e) do |r|
      r.bug_url = bug_url
      r.version = version

      r.kind = e.attributes['Kind'].text.presence
      r.end_date = e.attributes['EndDate'].text.presence
      r.originid = e.attributes['OriginId'].text.presence
      r.structure_kind = e.attributes['StructureKind'].text.presence
      r.structure_handle = e.attributes['StructureHandle'].text.presence
      r.navigation = e.attributes['Navigation'].text.presence
      r.delta = e.attributes['Delta'].text.presence
      r.interest = e.attributes['Interest'].text.presence
    end

    dump interaction, :interaction, i
  end
end
