#!/usr/bin/env ruby
require_relative 'common' and load_extise!

o, n, w, u = nil, 4, :thread, STDIN
c, v, q = true, false, false

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<url>...]'
  opt 'o -o --output=<path>'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  arg 'u [<url>...]'
end

n = 0 unless options.assigned? :n
v, q = false, true unless n.zero?

AutoColor.enable on: self, colored: c, colorings: {
  /\A *(change): \d+/ => -> (s, _) { s.sub(/(change): (\d+)/, "#{'\1'.blue}: #{'\2'.yellow}") }
}

r = 10
l = 80_000
i = v && !options.default?(:u) ? 1 : 0
u = u.flat_map { |a| a.is_a?(IO) ? d.readlines.map(&:strip) : a }

FileUtils.mkpath changes_directory = o || File.join(GitEclipseOrg::DIRECTORY, 'gerrit-changes')

u.each do |a|
  inform a if (!q && i != 0) || (n != 0 && u.size > 1)

  retries = r

  process 1..l, count: n, worker: w, progress: !n.zero? do |change_id|
    file = File.join changes_directory, "#{change_id}.json"

    puts "#{'  ' * i}change: #{change_id}" unless q

    next if File.exist? file

    content = `curl -#{'s' if !v || q}S #{a}/changes/#{change_id}/detail`.sub(/\A\)\]\}'\s*/, '')

    if content.blank? || content =~ /\ANot\s+Found/i
      next if (retries -= 1) > 0
      raise Parallel::Break
    end

    File.write file, content

    retries = r
  end
end
