#!/usr/bin/env ruby
require_relative 'common' and load_extise! and include Extisimo

models = %w(user task post attachment project repository commit element)
services = %w(bugzilla egit gerrit github)

s, c, m, k = nil, true, nil, nil

ARGV.bind_and_parse! to: :locals do
  use "[<options>] #{to_arg models} <identifier>..."
  opt "s -s --service=#{to_arg services}"
  opt 'c -c --[no-]color'
  arg "m #{to_arg models}", &included_in(models)
  arg 'k <identifier>...'
end

AutoColor.disable on: self unless c

def find(model, identifier)
  record = model.where(id: identifier).first
  return record if record
  if model == User
    User.find_by name: identifier
  elsif model == Project
    p, c = identifier.split(/\s+/)
    Project.find_by product: p, component: c
  elsif model == Repository
    Repository.find_by name: identifier
  elsif model == Commit
    r, i = identifier.split(/\s+/)
    repository = find Repository, r
    Commit.find_by repository: repository, identifier: i
  elsif model == Element
    r, c, i, p = identifier.split(/\s+/)
    commit = find Commit, "#{r} #{c}"
    puts commit
    puts commit: commit, identifier: i, path: p
    Element.find_by commit: commit, identifier: i, path: p
  end
rescue
  nil
end

model = m.camelize.constantize
record = find model, k * ' '

abort "#{model}:? record not found by #{k * ' '}" unless record

model, record = Project, record.project if record.is_a? Repository

suffix = "url#{'s' if model == Project}"
method = s ? "#{s}_#{suffix}" : services.reverse.map { |s| "#{s}_#{suffix}" }.find { |s| record.respond_to? s }

abort "#{model}:#{record.id} unable to open#{" via #{s}" if s}" unless record.respond_to? method

url = [record.send(method)].flatten.first

abort "#{model}:#{record.id} no URL available" unless url

`open #{url}`
