#!/usr/bin/env ruby
require_relative 'common' and load_extise! { include Extisimo }

m, p, f, r, n, w, x, y = :spearman, [], [], [], 4, :thread, nil, nil
c, s, t, v = true, true, 80, true

ARGV.bind_and_parse! to: :locals do
  use '[<options>] <target:name> <target:name>'
  opt 'm -m --method=(pearson|spearman)'
  opt 'p    --project=<id:Array>'
  opt 'f    --projects-by-classification=<value:Array>'
  opt 'r    --projects-by-product=<value:Array>'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  arg 'x <x>'
  arg 'y <y>'
end

n = 0 unless options.assigned? :n

options.binder.abort "needless option: --projects-by-classification=#{f * ','}" if p.any? && f.any?
options.binder.abort "needless option: --projects-by-product=#{r * ','}" if p.any? && r.any?

AutoColor.disable on: self unless c

def calculate_correlation(x, y, u = nil, p = nil, o = options.bound)
  args = [x, y] + { method: o[:m], user: u }.map { |k, v| "--#{k}=#{v}" if v }.compact
  args << "--subjects-by-project=#{p * ','}" if p.present?
  command = "rcor #{args * ' '} --no-color --no-verbose"
  inform "#{command}" if o[:v] unless o[:q]
  Open3.popen3(File.expand_path command, __dir__) do |input, output, error, status|
    r, e = *[output, error].map { |s| s.read.strip.presence }
    [input, output, error].each &:close
    r = Hash[%i(x y m r t p).zip r.split(/\s+/, 6)] if r
    %i(x y).each { |k| r[k] = Integer(r[k]) } if r
    %i(r t p).each { |k| r[k] = r[k] =~ /nan/i ? Float::NAN : Float(r[k]) } if r
    { user: u, project: p, status: status.value.to_i, correlation: r, message: e.try(:downcase) }
  end
end

def compare_correlation(a, b)
  c, v, u = a[:status] <=> b[:status], a[:correlation].try(:[], :r), b[:correlation].try(:[], :r)
  return c unless c.zero?
  c = (!v || v.nan? ? Float::INFINITY : v) <=> (!u || u.nan? ? Float::INFINITY : u)
  !c.zero? ? c : a[:name] <=> b[:name]
end

p += Project.joins(:tasks).where(Task.table_name => { classification: f }).pluck :id if f.any?
p += Project.where(product: r).pluck :id if r.any?

users = User.joins(:expertises).order(:name).distinct
users = users.where(id: Project.find(p).flat_map(&:collaborators).pluck(:id).uniq) if p.any?

correlations = []

process users.pluck(:id, :name), count: n, worker: w, progress: !n.zero? do |id, name|
  correlations << calculate_correlation(x, y, id, p).merge(name: name)
end

correlations = correlations.sort { |a, b| compare_correlation a, b } if s

if v
  correlations.each do |d|
    correlation = d[:correlation] ? { samples: :x, method: :m, coefficient: :r, t_test: :t, p_value: :p }.transform_values { |v| d[:correlation][v] } : {}
    dump_record correlation.reverse_merge class: 'Extisimo::Correlation', status: d[:status] == 0 ? 'success' : 'failure', message: d[:message]
    dump_record({ class: User.name, id: d[:user], name: d[:name] }, :user, 1)
  end
else
  require 'statsample_ext'

  table = Text::Table.new horizontal_padding: 0, horizontal_boundary: '', vertical_boundary: '', boundary_intersection: ' '
  table.head = %w(user name samples coefficient t-test p-value).map { |h| { align: :left, value: h.black << ' ' }}
  correlations.each do |d|
    row = [d[:user].to_s.black, d[:name].split(Extisimo::Naming::NAME_SEPARATOR).first.blue]
    if d[:correlation]
      row << Statsample::Colored.colorize_x(d[:correlation][:x], 10) { |q| '%d' % q }
      row << Statsample::Colored.colorize_r(d[:correlation][:r]) { |q| ('%+.8f' % q)[0..10] }
      row << Statsample::Colored.colorize_t(d[:correlation][:t]) { |q| ('%+.8f' % q)[0..10] }
      row << Statsample::Colored.colorize_p(d[:correlation][:p]) { |q| ('%.8f' % q)[0..9] }
    else
      row << { colspan: 4, value: d[:message].black }
    end
    table.rows << row.map { |c| c.is_a?(Hash) ? c.merge(value: "#{c[:value]} ") : "#{c} " }
  end

  def table.to_s
    ([separator, text_table_head.to_s, separator] + text_table_rows.map { |row| row.to_s.rstrip << $/ }).join
  end

  puts table if table.rows.any?
end
