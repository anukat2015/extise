#!/usr/bin/env ruby
require_relative 'common' and load_extise!

include Extisimo

m, c, s, t, v, q, p = nil, true, false, 80, true, false, []

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<path>...]'
  opt 'm    --module=<name>'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  arg 'p [<path>...]'
end

if p.empty?
  m ||= 'Extinf'
  p = Dir[File.expand_path "../../lib/extinf/{#{Inferencer::TARGETS.map(&:pluralize) * ','}}/*.rb", __FILE__]
end

AutoColor.disable on: self unless c

p.map { |f| File.absolute_path f }.each do |f|
  name, target = File.basename(f, '.rb').underscore, f.split(File::SEPARATOR)[-2].try(&:singularize)

  begin
    load f
    o = [m, name].compact.map(&:camelize).join('::').constantize.new
    name = o.name if o.respond_to? :name
    target = o.target if o.respond_to? :target
  rescue LoadError
    abort "unable to load #{f}".red
  rescue
    abort "unable to resolve #{f}".red
  end

  abort "invalid inferencer at #{f}".red unless o.respond_to? :infer
  abort "invalid target at #{f}".red unless Inferencer::TARGETS.include? target.to_s

  inferencer = persist(Inferencer, name: name) { |r| r.target, r.path = target, f }

  dump_record inferencer, :inferencer
end
