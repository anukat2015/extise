#!/usr/bin/env ruby
require_relative 'common' and load_extise!

e, c, s, n, t, v, m, a = false, true, true, nil, 80, true, nil, []

ARGV.bind_and_parse! to: :locals do
  use '[<options>] <model> <attribute>...'
  use '[<options>] -e [<command>...]'
  opt 'e -e --eval'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 'n -n --lines=<count:Integer>'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  arg 'm [<model>]'
  arg 'a [<attribute>...]'
end

options.binder.abort OptionParser::MissingArgument::Reason unless m && a.any? unless e

AutoColor.disable on: self unless c

data = Class.const_get(m).pluck(*a).map { |*v| v * ' ' } rescue abort("Unable to #{m}.pluck #{a * ', '}") unless e
args = %w(color sort verbose).map { |o| options.bound[o[0].to_sym] ? "-#{o[0]}" : "--no-#{o}" }
args = args.insert(-2, "-t#{t}").tap { |a| a.insert -3, "-n#{n}" if n }

if e
  data, args = %w(load_extise!) + ([m, a] + ARGV).compact.map { |x| Shellwords.escape x }, args << '-e'
  args, data = args + [Shellwords.escape("#{data[0]};[]")] + data[1..-1], [] if data.size > 1
end

Open3.popen3(File.expand_path "hist #{args * ' '}", __dir__) do |input, output, error, status|
  threads = [Thread.new { ignore(Errno::EPIPE) { output.each { |l| print l }}}]
  threads << Thread.new { error.each { |l| STDERR.print l }}

  unless data.empty?
    input.write data * "\n"
    STDIN.each { |l| input.write "\n#{l}" } if e
  end

  input.close
  threads.each &:join
  [output, error].each &:close
  abort unless status.value.success?
end
