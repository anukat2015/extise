#!/usr/bin/env ruby
require_relative 'common' and load_extise! { include Extisimo }

u, p, g, r = 'now', false, nil, []
c, s, t, v, q = true, false, 80, true, false

ARGV.bind_and_parse! to: :locals do
  use "[<options>] #{to_arg Metric::TARGETS} [<metric>...]"
  opt 'u    --until=<time:Time>'
  opt 'p    --progress'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  arg "g #{to_arg Metric::TARGETS}", &included_in(Metric::TARGETS)
  arg 'r [<metric>...]'
end

u = Time.now if u == 'now'
v, q = false, true if p

AutoColor.disable on: self unless c

metrics = Metric.on(g)
metrics = r.map { |n| metrics.where(name: n).first || abort("#{Metric}:? not found by #{n} on #{g}") } unless r.blank?
metrics = Hash[metrics.map { |metric| [metric, (Dyna.load_and_create!(file: metric.file, type: metric.type).last rescue abort $!)] }]

# NOTE: measure on subjects somehow related to tasks submitted prior to the desired time

subjects = case g.to_sym
when :concept
  Concept.left_joins conceptualities: [element: [commit: [repository: [project: :tasks]]]]
when :element
  Element.left_joins commit: [repository: [project: :tasks]]
when :session
  Session.left_joins interactions: [attachment: :task]
when :project
  Project.left_joins :tasks
end

inform "fetch subjects through tasks submitted until #{options.assigned?(:u) ? u : 'now'}" if v unless q

subjects = subjects.where("#{Task.table_name}.submitted_at <= ?", u).order(created_at: :asc).distinct

warn "no subjects fetched until #{options.assigned?(:u) ? u : 'now'}" unless subjects.any?

# NOTE: measure for users associated with a concept via element's commit, such users may not have assigned tasks
# NOTE: measure for users who modified elements with same node path, such users may not have assigned tasks
# NOTE: measure for session user only, such user has assigned at least one task
# NOTE: measure for users who contributed commits to a project, such users may not have assigned tasks

users_fetcher = case g.to_sym
when :concept
  -> (concept) { User.joins(commits: [elements: [conceptualities: :concept]]).where(Concept.table_name => { id: concept.id }).distinct }
when :element
  -> (element) { User.joins(commits: :elements).where(Element.table_name => { path: element.path }).distinct }
when :session
  -> (session) { [session.user] }
when :project
  -> (project) { User.joins(commits: [repository: :project]).where(Project.table_name => { id: project.id }).distinct }
end

# NOTE: set handle context so the measure setup will be available to the metric's handle object

metrics.each { |_, handle| handle.context = { until: u } if handle.respond_to? :context= }

# NOTE: measure for each subject through each fetched user via each metric's handle object

process subjects, progress: p do |subject|
  inform "fetch users for #{g}:#{subject.id} who somehow relate" if v unless q

  users = users_fetcher.call subject

  warn "no users fetched for #{g}:#{subject.id} who somehow relate" unless users.any?

  users.each do |user|
    metrics.each do |metric, handle|
      inform "measure on #{g}:#{subject.id} for #{user.name} with #{metric.name}" if v unless q

      # NOTE: do not catch any exceptions here since each metric is responsible for its own behavior,
      # this ensures that any fatal failures immediately terminate execution and backtrace is shown

      data = handle.measure user, subject

      unless data
        warn Extric::Reporting.message handle, user, subject, 'no data returned'
        next
      end

      value = Float data[:value] rescue nil

      unless value
        warn Extric::Reporting.message handle, user, subject, 'value not numeric'
        next
      end

      expertise = persist(Expertise, metric: metric, subject: subject, user: user) do |r|
        r.metric_data = data.except :value
        r.value = value
      end

      dump_record expertise, :expertise
    end
  end
end
