#!/usr/bin/env ruby
require_relative 'common' and load_extise! { include GitEclipseOrg }

n, w, z, p = 4, :thread, false, [STDIN]
c, s, t, v, q = true, false, 80, true, false

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<directory>...]'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  opt 'z    --stat'
  arg 'p [<path>...]'
end

n = 0 unless options.assigned? :n
v, q = false, true unless n.zero?

AutoColor.disable on: self unless c

BUGID_MATCHERS = [
  /\A(\d+):?\s/,
  /\A[\[\|](\d+)[\]]\s/,
  /#(\d+)[:\.\s]/,
  /bug\s*(\d+)[\.\)\s]/i,
  /bug\s*\[?(\d+)[\]\}]/i,
  /\*\s*\[(\d+)\]/
]

def extract_bugid(s)
  s = s.gsub(/\A["\s]*/, '')
  BUGID_MATCHERS.each { |r| s.match(r).to_a[1].tap { |b| return b if b }}
  nil
end

def persist_user(a)
  persist(User, accountid: a['_account_id']) do |r|
    r.username = a['username'].presence
    r.name = a['name'].presence
    r.email = a['email'].presence
  end
end

i = v && !options.default?(:p) ? 1 : 0
p = p.flat_map { |d| d.is_a?(IO) ? d.readlines.map(&:strip) : d }

p.each do |d|
  inform d unless q || i.zero?

  files = Dir[File.join d, '*.json']

  if z
    q = false
    dump_attribute :changes, files.count, i
    next
  end

  process files, count: n, worker: w, progress: !n.zero? do |f|
    JSON.parse(File.read f).tap do |c|
      changeid = File.basename(f, '.json').to_i

      abort "#{Change}:? mismatching change identifier" if changeid != c['_number']

      project = persist(Project, name: c['project'].split('/', 2).last) do |r|
        r.parent = c['project'].split('/', 2).first
      end

      owner = persist_user c['owner']

      change = persist(Change, changeid: changeid) do |r|
        r.project_id = project.id
        r.owner_id = owner.id

        r.bugid = extract_bugid c['subject']
        r.project_name = c['project'].presence
        r.branch_name = c['branch'].presence
        r.change_identifier = c['change_id'].presence
        r.subject = c['subject'].presence
        r.status = c['status'].presence
        r.created = c['created']
        r.updated = c['updated']
      end

      dump_record change, :change, i
      dump_record project, :project, i + 1
      dump_record owner, :owner, i + 1

      c['messages'].each do |m|
        author = m['author'] ? persist_user(m['author']) : nil

        message = persist(Message, identifier: m['id'].presence) do |r|
          r.change_id = change.id
          r.author_id = author.try :id

          r.message = m['message'].presence
          r.date = m['date']
        end

        dump_record message, :message, i + 1
        dump_record author, :author, i + 2 if author
      end

      c['labels'].each do |n, a|
        (a['all'] || []).each do |l|
          user = persist_user l

          label = persist(Label, change_id: change.id, user_id: user.id, name: n) do |r|
            r.value = l['value'].presence
            r.approved = l['_account_id'] == a['approved'].try { self['_account_id'] }
            r.date = l['date']
          end

          dump_record label, :label, i + 1
          dump_record user, :user, i + 2
        end
      end
    end
  end
end
