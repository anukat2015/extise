#!/usr/bin/env ruby
require_relative 'common'

e, c, s, n, t, v, m = false, true, true, nil, 80, true, [STDIN]

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<path>...]'
  use '[<options>] -e [<command>...]'
  opt 'e -e --eval'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 'n -n --lines=<count:Integer>'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  arg 'm [<mix>...]'
end

AutoColor.enable on: self, colored: c, colorings: -> (s) { s.sub(/\A([^ ]+) (.+)\z/, "#{'\1'.yellow} #{'\2'.black}") }

begin
  a = m.inject([]) { |_, f| _ += SafeEval::IO.read_with_safe_eval f, eval: e, as: Array }
  h = a.inject(Hash.new 0) { |h, i| h[i.to_s.strip] += 1; h }
  h = Hash[h.sort_by { |_, x| -x }] if s
rescue Exception
  abort "Unable to process input -> #{$!}"
end

abort 'No input data' if h.empty?

pad_x = h.values.max_by { |x| x.to_s.length }.to_s.length
pad_k = [h.keys.max_by { |k| k.length }.to_s.length, t - pad_x + (v ? 0 : 1 + 1 + 6 + 1) - 1].min
max_b = [IO.console.winsize[1] - pad_k - (v ? 1 + pad_x + 1 + 6 + 1 : 1), 1].max
sum = h.values.inject :+

n = h.count + n if n.to_i < 0

h.each do |k, x|
  break if n && (n -= 1) < 0
  r = x.to_f / sum
  p = "%#{pad_k}s#{" %#{pad_x}s" % x if v}#{' %6.2f' % (100 * r) if v} %s"
  puts p % [k[0..(pad_k - 1)], '-' * (max_b * r).to_i]
end
