#!/usr/bin/env ruby
require_relative 'common' and load_extise! { include BugsEclipseOrg }

a, n, w, z, p = [], 4, :thread, false, [STDIN]
c, s, t, v, q = true, false, 80, true, false

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<file>...]'
  opt 'a -a --attachments=<ids:Array>'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  opt 'z    --stat'
  arg 'p [<path>...]'
end

n = 0 unless options.assigned? :n
v, q = false, true unless n.zero?

AutoColor.disable on: self unless c

i = v && !options.default?(:p) ? 1 : 0

p.each do |f|
  d = Nokogiri::XML File.open_or f

  inform f unless q || i.zero?

  if z
    q = false
    dump_attribute :history, d.root.attributes['Id'].text, i
    dump_attribute :events, d.css('InteractionEvent').count, i + 1
    next
  end

  bug_url = d.root.attributes['Id'].text.strip
  version = d.root.attributes['Version'].text.strip
  bugid = bug_url.match(/\d+\z/)[0]
  attachid = Integer a.shift

  # NOTE: data from local URLs can not be trusted and data from studio.atlassian.com are often mismatched with bugs

  if bug_url =~ %r{(local|https://studio.atlassian.com)-\d+\z}
    warn "#{Attachment}:#{attachid || '?'} has unsupported URL #{bug_url} -> skip"
    next
  end

  # NOTE: work only with data of contexts from known sources as described below

  abort "#{Attachment}:#{attachid || '?'} invalid URL #{bug_url}" if bug_url !~ %r{\A(https://bugs.eclipse.org/bugs)-\d+\z}
  abort "#{Attachment}:#{attachid || '?'} invalid version #{version}" if version != '1'

  bug = Bug.where(bugid: bugid).first

  if bug.nil?
    warn "#{Bug}:#{bugid} not found -> skip"
    next
  end

  if attachid
    context = Attachment.where(attachid: attachid, filename: Attachment::MYLYN_CONTEXT_FILENAME).first

    abort "#{Attachment}:#{attachid} context not found" unless context
    abort "#{Attachment}:#{attachid} context does not match #{Bug}:#{bugid}" if context.bug.bugid.to_s != bugid
  else
    contexts = Attachment.where(bug: bug, filename: Attachment::MYLYN_CONTEXT_FILENAME)
    context = contexts.first

    abort "#{Bug}:#{bugid} missing context" if contexts.count.zero?
    abort "#{Bug}:#{bugid} various contexts" if contexts.count > 1
  end

  process d.css('InteractionEvent'), count: n, worker: w, progress: !n.zero? do |e|
    interaction = persist(Interaction, xml: e) do |r|
      r.attachment_id = context.id
      r.bug_url = bug_url
      r.version = version

      r.kind = e.attributes['Kind'].text.presence
      r.start_date = e.attributes['StartDate'].text.presence
      r.end_date = e.attributes['EndDate'].text.presence
      r.originid = e.attributes['OriginId'].text.presence
      r.structure_kind = e.attributes['StructureKind'].text.presence
      r.structure_handle = e.attributes['StructureHandle'].text.presence
      r.navigation = e.attributes['Navigation'].text.presence
      r.delta = e.attributes['Delta'].text.presence
      r.interest = e.attributes['Interest'].text.presence
    end

    dump_record interaction, :interaction, i
  end
end
