#!/usr/bin/env ruby
require_relative 'common' and load_extise! { include Extisimo }

n, w, r = 4, :thread, nil
c, s, t, v, q = true, false, 80, true, false

ARGV.bind_and_parse! to: :locals do
  use '[<options>] <repository>'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  arg 'r <repository>'
end

n = 0 unless options.assigned? :n
v, q = false, true unless n.zero?

AutoColor.disable on: self unless c

# NOTE: interaction file path is relative to Eclipse project whereas element file path is relative
# to Git repository root, interaction file path relative root can not be recomputed to Git repository
# root since the interaction may refer to an uncommitted file

# NOTE: to connect interactions with elements not only file paths must be matched but node paths must
# be matched also, hence node paths should include method parameters in comparable format and should
# also cover all possible nested nodes

# NOTE: ignore constant declarations and all possibly nested elements
# NOTE: ignore type and method declarations nested in anonymous classes
# NOTE: infer node path from file when missing
# NOTE: strip method parameters

def parse_structure_handle(h)
  case h.to_s[0]
  when '/'
    f = h[1..-1].sub(/;.*\z/, '')
    { file: f }
  when '='
    d, p, n, e = *h[1..-1].split(/&lt;|\{|\[/)
    return nil unless n
    f = File.join d, p.split(/\./), n
    e = e ? File.join(e.sub(/\^.*\z/, '').sub(/~[^;]+;.*\z/, '').split(/~/)) : nil
    e ||= File.basename(f, '.java') if f.ends_with? '.java'
    { file: f, directory: d, package: p, name: n, element: e }
  else
    nil
  end
end

repository = Repository.find_by name: r

abort "#{Repository}:? not found by #{r}" unless repository

dump_record repository, :repository

# NOTE: command, preference, and attention kinds are completely missing from original data
# NOTE: navigation does not hold any information value in original data and can be ignored
# NOTE: interaction delta in original data is always blank and therefore can be ignored

interactions = BugsEclipseOrg::Interaction.joins(attachment: [extisimo_attachment: [task: [project: :repositories]]]).where(
  Repository.table_name => { id: repository },
  kind: %w(edit selection),
  structure_kind: %w(java resource build.xml plugin.xml),
  originid: %w(
    org.eclipse.jdt.callhierarchy.view
    org.eclipse.jdt.ui.ClassFileEditor
    org.eclipse.jdt.ui.CompilationUnitEditor
    org.eclipse.jdt.ui.PackageExplorer
    org.eclipse.jdt.ui.PropertiesFileEditor
    org.eclipse.jdt.ui.TypeHierarchy

    org.eclipse.pde.ui.buildEditor
    org.eclipse.pde.ui.featureEditor
    org.eclipse.pde.ui.manifestEditor

    org.eclipse.ui.DefaultTextEditor
    org.eclipse.ui.navigator.ProjectExplorer
    org.eclipse.ui.views.ContentOutline
    org.eclipse.ui.views.ResourceNavigator

    org.eclipse.mylar.ide.resource.interest.updater
    org.eclipse.mylyn.ide.resource.interest.updater
    org.eclipse.mylyn.resources.ui.interest.updater
    org.eclipse.mylyn.tasks.ui.editors.task

    org.eclipse.search.ui.views.SearchView
    org.eclipse.team.sync.views.SynchronizeView
  )
).order(start_date: :asc)

shown_session = nil

process interactions, count: n, worker: w, progress: !n.zero? do |i|
  attachment = i.attachment.extisimo_attachment
  user = attachment.author
  commits = Commit.where(author: user).where('submitted_at > ?', i.start_date).order(submitted_at: :asc)

  # NOTE: consider consecutive commits A, B, C where A and C have the same author and B is authored by someone else,
  # and a session identified by commit C is created, then C is revision commit, B is original commit, and A is a commit
  # by the same author previous to revision, the session is then bounded by A and C

  previous, revision = *commits.limit(2)

  # NOTE: skip all interactions of initial session, i.e. ignore all unbounded sessions

  next unless previous

  unless revision
    warn "#{BugsEclipseOrg::Interaction}:#{i.id} revision commit not found"
    next
  end

  session = persist(Session, user: user, revision_commit: revision) do |r|
    r.previous_commit = previous
    r.previous_identifier = previous.identifier
    r.revision_identifier = revision.identifier
    r.started_at = previous.submitted_at
    r.finished_at = revision.submitted_at
  end

  dump_record shown_session = session, :session, 1 unless shown_session == session

  handle = parse_structure_handle i.structure_handle

  # NOTE: crop node paths to match top level Java type declarations only

  interaction = persist(Interaction, bugs_eclipse_org_interaction_id: i.id) do |r|
    r.attachment = attachment
    r.session = session
    r.kind = i.kind.presence
    r.origin = i.originid.presence
    r.resource = i.structure_kind.presence
    r.file = handle[:file].presence if handle
    r.path = handle[:element].try! { sub(/\/.*\z/, '').presence } if handle
    r.started_at = i.start_date
    r.finished_at = i.end_date
  end

  dump_record interaction, :interaction, 2
end
