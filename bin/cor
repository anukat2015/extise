#!/usr/bin/env ruby
require_relative 'common'

e, m, c, v, x, y = false, :spearman, true, true, STDIN, nil

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<path>] [<path>]'
  use '[<options>] -e [<command>] [<command>]'
  opt 'e -e --eval'
  opt 'm -m --method=(pearson|spearman)'
  opt 'c -c --[no-]color'
  opt 'v -v --[no-]verbose'
  arg 'x [<x>]'
  arg 'y [<y>]'
end

require 'statsample'
require 'statsample_ext'

AutoColor.enable on: self, colored: c, colorings: {
  /\A\w:/ => -> (s) { s.sub(/\A(\w): ([^\[ ]+) ?(.*)?/, "#{'\1'.blue}: #{'\2'.yellow} #{'\3'.black}") },
  /\A\d/ => -> (s) { s.sub(/\A(\d+ \d+) (\w+) ([^ ]+) (.+)/, ['\1'.black, '\2'.blue, '\3'.yellow, '\4'.black] * ' ') }
}

begin
  x = SafeEval::IO.read_with_safe_eval x, eval: e, as: Array
  y = SafeEval::IO.read_with_safe_eval y, eval: e, as: Array unless y.nil?

  x, y = x, [] if x.size == 1 && y.nil?
  x, y = x[0..(x.size / 2 - 1)], x[(x.size / 2)..-1] if y.nil?
  x, y = *[x, y].map { |u| u.inject([]) { |a, i| i.nil? || i.to_s.strip.empty? ? a : (a << i.to_f) }}
rescue Exception
  abort "Unable to process input -> #{$!}"
end

abort 'Input vectors mismatch' if x.size != y.size
abort 'Input vectors empty' if x.empty?

if v
  puts "X: #{x.size} #{x}"
  puts "Y: #{x.size} #{y}"
end

# NOTE: Spearman correlation is in fact Pearson correlation on ranked vectors

x, y = Daru::Vector[x], Daru::Vector[y]
x, y = x.ranked, y.ranked if m.to_sym == :spearman

p = Statsample::Bivariate::Pearson.new x, y

def p.p
  probability
rescue Math::DomainError
  Float::NAN
end

if v
  puts 'M: %s' % m
  puts 'R: %+.12f' % p.r
  puts 'T: %+.12f' % p.t
  puts 'P: %.12f' % p.p
else
  puts '%d %d %s %+.12f %+.12f %.12f' % [x.size, y.size, m, p.r, p.t, p.p]
end
