#!/usr/bin/env ruby
require_relative 'common' and load_extise! { include Extisimo }

e, m, s, u, p, r, c, v, x, y = false, :spearman, nil, nil, nil, nil, true, true, nil, nil

ARGV.bind_and_parse! to: :locals do
  use '[<options>] <target:name> <target:name>'
  use '[<options>] -e [<command>] [<command>]'
  opt 'e -e --eval'
  opt 'm -m --method=(pearson|spearman)'
  opt 's    --subject=<id:Integer>'
  opt 'p    --subjects-by-project=<id:Integer>'
  opt 'u    --user=<id:Integer>'
  opt 'r    --users-by-project=<id:Integer>'
  opt 'c -c --[no-]color'
  opt 'v -v --[no-]verbose'
  arg 'x [<x>]'
  arg 'y [<y>]'
end

options.binder.abort OptionParser::MissingArgument::Reason unless x && y unless e

AutoColor.disable on: self unless c

def fetch_expertise_values(q, s = nil, u = nil, p = nil, r = nil)
  t, n = *q.split(/:/, 2)
  metric = Metric.find_by(target: t, name: n) || abort("#{Metric}:? not found by #{n} on #{t}")
  type = Expertise::SUBJECT_TYPES[Metric::TARGETS.index metric.target].constantize
  relation = Expertise.by(metric)
  relation = relation.on(type.find s) if s
  relation = relation.of(u) if u
  relation = case metric.target.to_sym
  when :element
    relation.joins(element: [commit: :repository]).where(Repository.table_name => { project_id: p })
  when :session
    relation.joins(session: [interactions: [attachment: :task]]).where(Task.table_name => { project_id: p })
  when :project
    relation.joins(:project).where(Project.table_name => { id: p })
  when :concept
    relation.joins(conceptualities: [element: [commit: :repository]]).where(Repository.table_name => { project_id: p })
  else
    raise
  end if p
  relation = relation.of(Project.find(r).collaborators) if r
  Hash[relation.distinct.pluck(:user_id, :subject_id, :value).map { |d| [d[0..1], d[2]] }]
end

def wrap_for_eval(c)
  Shellwords.escape "load_extise!;#{c}" if c
end

args = ["-m#{m}"]
args += %w(color verbose).map { |o| options.bound[o[0].to_sym] ? "-#{o[0]}" : "--no-#{o}" }

if !e
  x = fetch_expertise_values x, s, u, p, r
  y = fetch_expertise_values y, s, u, p, r

  k = x.keys & y.keys

  x = x.slice(*k).sort.map &:second
  y = y.slice(*k).sort.map &:second
else
  x = wrap_for_eval x
  y = wrap_for_eval y

  args += ['-e', x, y].compact
end

Open3.popen3(File.expand_path "cor #{args * ' '}", __dir__) do |input, output, error, status|
  threads = [Thread.new { ignore(Errno::EPIPE) { output.each { |l| print l }}}]
  threads << Thread.new { error.each { |l| STDERR.print l }}

  if x
    input.write [x, y].flatten(1).compact * "\n"
  elsif e
    input.write 'load_extise!'
    STDIN.each { |l| input.write "\n#{l}" }
  end

  input.close
  threads.each &:join
  [output, error].each &:close
  abort unless status.value.to_i.zero?
end
