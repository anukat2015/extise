#!/usr/bin/env ruby
require_relative 'common' and load_extise!

a, n, w, b = [], 0, :thread, true
c, s, t, v, q, z, p = true, false, 80, true, false, false, [STDIN]

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<file>...]'
  opt 'a -a --attachments=<ids:Array>'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  opt 'z    --stat'
  arg 'p [<path>...]'
end

b, v, q = !q, false, true unless n.zero?

AutoColor.disable on: self unless c

include BugsEclipseOrg

i = v && !options.default?(:p) ? 1 : 0

p.each do |f|
  d = Nokogiri::XML File.open_or f

  puts "#{f.green}" unless q || i.zero?

  if z
    dump_attribute :history, d.root.attributes['Id'].text, i
    dump_attribute :events, d.css('InteractionEvent').count, i + 1
    next
  end

  bug_url = d.root.attributes['Id'].text.strip
  version = d.root.attributes['Version'].text.strip
  bugid = Integer(bug_url.match(/\d+\z/)[0])
  attachid = Integer(a.shift)

  abort "Invalid URL: #{bug_url}".red if bug_url !~ %r{\A(local|https://(bugs.eclipse.org/bugs|studio.atlassian.com))-\d+\z}
  abort "Invalid version: #{version}".red if version != '1'

  bug = Bug.where(bugid: bugid).first

  return warn("#{Bug}:#{bugid} not found -> skip".magenta) && nil if bug.nil?

  if attachid
    context = Attachment.where(attachid: attachid, filename: Attachment::MYLYN_CONTEXT_FILENAME).first

    abort "#{Attachment}:#{attachid} context not found".red unless context
    abort "#{Attachment}:#{attachid} context does not match #{Bug}:#{bugid}".red if context.bug.bugid != bugid
  else
    contexts = Attachment.where(bug: bug, filename: Attachment::MYLYN_CONTEXT_FILENAME)
    context = contexts.first

    abort "#{Bug}:#{bugid} missing context".red if contexts.count.zero?
    abort "#{Bug}:#{bugid} various contexts".red if contexts.count > 1
  end

  process d.css('InteractionEvent'), count: n, worker: w, progress: b do |e|
    interaction = persist(Interaction, xml: e) do |r|
      r.attachment_id = context.id
      r.bug_url = bug_url
      r.version = version

      r.kind = e.attributes['Kind'].text.presence
      r.start_date = Time.parse(e.attributes['StartDate'].text).utc
      r.end_date = e.attributes['EndDate'].text.presence
      r.originid = e.attributes['OriginId'].text.presence
      r.structure_kind = e.attributes['StructureKind'].text.presence
      r.structure_handle = e.attributes['StructureHandle'].text.presence
      r.navigation = e.attributes['Navigation'].text.presence
      r.delta = e.attributes['Delta'].text.presence
      r.interest = e.attributes['Interest'].text.presence
    end

    dump_record interaction, :interaction, i
  end
end
