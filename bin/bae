#!/usr/bin/env ruby
require_relative 'common'

o, n, w, z, p = nil, 4, :thread, false, [STDIN]
c, v, q = true, true, false

ARGV.bind_and_parse! to: :locals do
  use '[<options>] [<file>...]'
  opt 'o    --open[=<application>]'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  opt 'z    --stat'
  arg 'p [<path>...]'
end

AutoColor.disable on: self unless c

require 'active_support/all'
require 'active_support/testing/stream'
require 'statsample_ext'

module Syntax
  attr_accessor :measure_until

  def correlation(t, x, y, options = {})
    c = %i(method normalization scope)
    u = %i(project projects_by_classification projects_by_product)
    r = %i(subject subjects_by_project user users_by_project)

    options = grab_keys options, duals: [c, u, r].flatten, others: %i(global)

    x, y = *[x, y].map { |a| Array.wrap(a).map { |i| "#{t}:#{i}" }}

    m = fetch_values options, :method, optional: true
    n = fetch_values options, :normalization, default: 'raw'
    s = fetch_values options, :scope, default: options.except(*dual_keys(c))

    s = [s] if s.is_a? Hash
    s = s.map do |o|
      raise 'global already given' if o.key?(:global) && o.keys.count > 1

      o = grab_keys(o, duals: [u, r].flatten) unless o.key? :global

      [u + r].flatten.each { |k| o[k] = fetch_values o, k, optional: true }

      raise 'both project and subject or user given' if u.select { |k| o[k].present? }.any? && r.select { |k| o[k].present? }.any?
      raise 'project already scoped' if o[:project].present? && o[:projects_by_classification].present?
      raise 'project already scoped' if o[:project].present? && o[:projects_by_product].present?
      raise 'both subject and user given' if o[:subject].present? && o[:user].present?
      raise 'subject already scoped' if o[:subject].present? && o[:subjects_by_project].present?
      raise 'user already scoped' if o[:user].present? && o[:users_by_project].present?

      if o[:global].to_s == 'per-user' || u.select { |k| o[k].present? }.any?
        ['ucor', *pack_values(o, u), '--no-verbose', { parallel: true, silent: true }]
      elsif !o.key?(:global) || o[:global].to_s == 'overall' || r.select { |k| o[k].present? }.any?
        ['rcor', *pack_values(o, r), '--no-verbose', { silent: true }]
      else
        raise 'unable to resolve'
      end
    end

    runs = x.product(y).each.flat_map do |a, b|
      m.product(n).each.flat_map do |method, normalization|
        s.map do |p|
          p = p.dup.insert 1, *[a, b].map { |i| normalization.to_s == 'raw' ? i : "#{i}:#{normalization}" }
          p.insert 3, pack_value(method: method) if method
          run *p
        end
      end
    end

    correlation_summary runs
  end

  def correlation_summary(runs)
    runs = runs.compact.select { |run| run[:status] && run[:arguments].first == 'rcor' }
    table = Text::Table.new horizontal_padding: 0, horizontal_boundary: '', vertical_boundary: '', boundary_intersection: ' '

    return unless runs.any?

    runs.each do |run|
      d = File.read(run[:log]).split(/\n+/)
      d[0..1] = d[0].black, d[1].sub(/\s+--(no-)?(color|verbose)\s*/, ' ').strip.split(/\s+/, 4).map(&:white)
      d[2] = %i(x y m r t p).zip(d[2].split(' ')).map { |v, x| Statsample::Colored.send("colorize_#{v}", x) } * ' '
      table.rows << d.flatten.map { |c| "#{c} " }
    end

    summary = File.expand_path File.join(%W(.. .. tmp #{File.basename(File.dirname runs.first[:log])} rcor-summary)), __FILE__

    begin
      FileUtils.mkpath File.dirname summary
      File.write summary, table.text_table_rows.map(&:to_s).join
      Dir.chdir(File.dirname summary) { run "cat < #{File.basename summary}", expand_command: false }
    ensure
      FileUtils.rm_r File.dirname summary
    end
  end

  private :correlation_summary

  alias_method :correlate, :correlation

  def histogram(*args)
    args.select { |a| a =~ /\A\s*--/ }.tap { |u| raise 'direct options not allowed' if u.any? }
    run 'rhist', *(args.size == 1 ? ['--eval', "'#{args.first}'"] : args.flatten).map(&:to_s), silent: true
  end

  def measure(options = {})
    options = grab_keys options, duals: %i(targets metrics normalizations), others: %i(until)

    fetch_values(options, :targets).each do |target|
      fetch_values(options, :metrics).each do |metric|
        run 'measure', target, metric, pack_value(until: measure_until || :now), parallel: true, silent: false
        fetch_values(options, :normalizations, optional: true).each do |normalization|
          run 'normalize', target, metric, pack_value(method: normalization), parallel: true, silent: false
        end
      end
    end
  end

  def normalize(options = {})
    options = grab_keys options, duals: %i(targets metrics methods)

    fetch_values(options, :targets).each do |target|
      fetch_values(options, :metrics).each do |metric|
        fetch_values(options, :methods).each do |method|
          run 'normalize', target, metric, pack_value(method: method), parallel: true, silent: false
        end
      end
    end
  end

  private

  def dual_keys(keys)
    Array.wrap(keys).flat_map { |k| [k.to_s.singularize.to_sym, k.to_s.pluralize.to_sym] }
  end

  alias_method :dual_key, :dual_keys

  def grab_keys(options, duals: nil, others: nil)
    options, duals, others = options.dup, duals || [], others || []
    keys = dual_keys(duals) + others
    unknown = (options.keys - keys)
    raise "unrecognized option#{'s' if unknown.size > 1} #{unknown.to_sentence}" unless unknown.size.zero?
    options
  end

  def fetch_values(options, key, default: nil, optional: false)
    multiple, single = *dual_key(key)
    raise "#{single} already given" if options.key?(single) && options.key?(multiple)
    values = Array.wrap options.fetch(multiple, options.fetch(single, []))
    return default != nil ? Array.wrap(default) : [] if values.empty? && (default || optional)
    values.any? ? values : raise("no #{single} given")
  end

  alias_method :fetch_value, :fetch_values

  def pack_values(options, keys = options.keys)
    keys.select { |k| options[k].present? }.map do |k|
      r = Array.wrap(options[k]) * ','
      v = r =~ /\s/ && r =~ /[\w\s\-:.,]/ ? "'#{r}'" : r.shellescape
      "--#{k.to_s.tr '_', '-'}=#{v}"
    end
  end

  alias_method :pack_value, :pack_values
end

class Round
  include ActiveSupport::Testing::Stream

  attr_accessor :file, :options

  def initialize(file, options = {})
    self.file, self.options = file.dup, options.dup
    AutoColor.disable on: self unless self.options[:color]
  end

  def load!
    space, round = Object.new, self
    space.define_singleton_method(:run) { |*a| round.run *a }
    space.singleton_class.include Syntax
    space.instance_eval { load File.expand_path '../../Extisefile', __FILE__ }
    SafeEval::IO.read_and_safe_eval File.open_or(file), context: space
    index_screenshots
    true
  end

  def run(*a)
    a = a.flatten.compact
    a, o = *(a.last.is_a?(Hash) ? [a[0..-2], a.last] : [a, {}])
    a += %W(--parallel=#{options[:parallel]} --parallel-worker=#{options[:parallel_worker]}) if o[:parallel]
    a.dup.map { |n| a.delete(n).tap { |d| a << d if d } if n =~ /\A--((no-)?(color|sort|verbose)|trim|quiet)/ }
    c, t, f = a * ' ', Time.now.strftime('%Y%m%d-%H%M%S-%L'), file.is_a?(IO) ? nil : File.basename(file, '.rb')
    puts "#{filter_uninteresting(a) * ' '}".cyan unless options[:quiet]
    return if options[:stat]
    @log_directory ||= File.expand_path File.join(%W(.. .. log #{t}#{'_' + f if f})), __FILE__
    FileUtils.mkpath @log_directory
    l = File.join @log_directory, "#{t}_#{a[0].split(/\s+/, 2)[0]}.log"
    File.write l, "#{t.black}\n\n#{c.white}\n\n"
    begin
      c = File.expand_path File.join(%W(.. #{c})), __FILE__ unless o[:expand_command] === false
      r = "#{c} 2>> #{l} | tee -a #{l}; exit ${PIPESTATUS[0]}"
      q = o.fetch(:silent, true) || options[:quiet] || !options[:verbose]
      s = q ? quietly { system(r) } : system(r)
      puts s ? 'success'.green : 'failure'.red if !options[:quiet] && options[:verbose]
      { time: t, arguments: a, status: s, log: l }
    ensure
      fix_log(l) and take_screenshot(t, a, s, l) unless options[:stat]
    end
  end

  private

  def filter_uninteresting(a)
    p = a.reject { |x| x =~ /\A--(parallel|(no-)?(color|sort|verbose)|trim|quiet)/ }
    p.size != a.size ? p << 'â€¦' : p
  end

  def fix_log(f)
    s = File.read(f).gsub(/\s*ETA:[^%]+%\r/, "\r").gsub(/\r\s*/, $/)
    s = s.split(/\n/, 4).tap { |x| x[2] << $/ }.join($/).sub(/\s*Time:/) { |x| ($/ * 2) << x.lstrip }
    File.write f, s.gsub(/[\n]{3,}/, $/ * 2)
  end

  def build_screenshot(t, c)
    <<-HTML.strip_heredoc.sub(/<%\s*title\s*%>/, t).sub(/<%\s*content\s*%>/, c)
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="utf-8">
          <title><% title %></title>
        </head>
        <body style="margin: 1rem; font-size: 14px">
          <pre style="display: inline-block; margin: 0; padding: 1rem; background: #000; color: #bbb"><% content %></pre>
        </body>
      </html>
    HTML
  end

  def index_screenshots
    return unless @screenshots
    m = @screenshots.map { |s| filter_uninteresting(s[:arguments]).join(' ').length }.max
    t = "#{File.basename(File.dirname @screenshot_directory)}"
    i = @screenshots.map { |s|
      l = "#{s[:time].black} #{filter_uninteresting(s[:arguments]).join(' ').ljust(m).white} #{s[:status] ? 'success'.green : 'failure'.red }"
      "<a href=\"#{File.basename s[:screenshot]}\" style=\"text-decoration: none\">#{Colored.decolorize l, escape: Colored::HTML}</a>"
    } * $/
    h = File.join(@screenshot_directory, 'index.html')
    File.write h, build_screenshot(t, i)
    `open #{"-a #{options[:open]}" if options[:open].is_a? String} -g #{h}` if options[:open]
  end

  def take_screenshot(t, a, s, l)
    o = File.read(l)
    File.write l, Colored.decolorize(o)
    return unless options[:color]
    @screenshot_directory ||= File.join(File.dirname(l), 'screenshots')
    FileUtils.mkpath @screenshot_directory
    h = File.join @screenshot_directory, "#{File.basename(l)}.html"
    (@screenshots ||= []) << { time: t, arguments: a, status: s, log: l, screenshot: h }
    File.write h, build_screenshot("#{t} #{filter_uninteresting(a) * ' '}", Colored.decolorize(o, escape: Colored::HTML))
  end
end

h = {
  open: o,
  parallel: n,
  parallel_worker: w,
  color: c,
  verbose: v,
  quiet: q,
  stat: z
}

p.each do |f|
  inform f if v && !q && !f.is_a?(IO)

  Round.new(f, h).load!
end
