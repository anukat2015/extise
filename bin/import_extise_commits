#!/usr/bin/env ruby
require_relative 'common' and load_extise! { include Extisimo }

d, e, n, w, r = nil, :unit, 4, :thread, nil
c, s, t, v, q = true, false, 80, true, false

ARGV.bind_and_parse! to: :locals do
  use '[<options>] <repository>'
  opt 'd -d --directory=<path>'
  opt 'e -e --extract=(none|unit)'
  opt 'n    --parallel[=<count:Integer>]'
  opt 'w    --parallel-worker=(process|thread)'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  arg 'r <repository>'
end

# NOTE: extraction of method declaration nodes requires more accurate node path computation which will include
# method parameters, as well as proper interactions' structure handle parsing to be able to, at least partially,
# match elements of commits with those of interactions

n = 0 unless options.assigned? :n
v, q = false, true unless n.zero?

AutoColor.disable on: self unless c

include Extisimo::Naming

def fetch_user(u)
  raise unless User.respond_to? :fetch

  users = User.fetch(compose_names(nil, u[:name]), compose_names(u[:name], nil), u[:name]).to_a
  abort "#{User}:? ambiguous name #{u[:name]}" if users.count >= 2
  users.first
end

d ||= File.join GitEclipseOrg::DIRECTORY, 'repositories'

# NOTE: since the sum of interactions is far greater than the sum commits,
# we first process commits and leave interactions for later processing

repository = Repository.find_by name: r

abort "#{Repository}:? not found by #{r}" unless repository

dump_record repository, :repository

path = File.join d, repository.name
git = Rugged::Repository.new path
sort = Rugged::SORT_DATE | Rugged::SORT_REVERSE

# NOTE: always process master commits only

git.checkout 'master'

process git.walk('HEAD', sort).to_a, count: n, worker: w, progress: !n.zero? do |c|

  # NOTE: skip first commit and all merge commits

  next if c.parents.count != 1

  author = fetch_user c.author

  # NOTE: skip commits for users who can not be identified

  unless author
    warn "#{User}:? not found by #{c.author[:name]}"
    next
  end

  commit = persist(Commit, repository: repository, identifier: c.oid) do |r|
    r.author = author
    r.submitted_at = c.time.utc
  end

  dump_record commit, :commit, 1

  # NOTE: skip elements extraction if not desired

  next if e.to_sym == :none

  # NOTE: consider only elements from the revision file, the actual difference itself is not included implicitly
  # in the the model but rather computed later between the original (not previous) and revision commit files

  files = c.parents.first.diff(c).deltas.map &:new_file

  # NOTE: select only Java files to process (also filter out binary files)

  sources = {}

  files.select! do |f|
    next if f[:oid] =~ /0{40}/
    next if f[:path].ends_with?('package-info.java')
    next unless f[:path].end_with?('.java')

    if (b = git.lookup f[:oid]).binary?
      warn "#{Commit}:#{commit.id} binary content in #{f[:path]}"
      next
    end

    sources[f[:path]] = b.text
  end

  # NOTE: move to next commit if no Java files are present and leave
  # the current commit persisted since it still indicates a session boundary

  next if files.empty?

  # NOTE: extract Java type declarations for all files at once

  extractor, data = 'TypePositionExtractor', Extise::Data.pack_files(sources)

  sources.clear

  inform "#{'  ' * 2}" << "#{Extise.command extractor} < â€¦" if v unless q

  blocks = Extise.stream(function: extractor, input: data) do |o|
    Extise::Data.parse_blocks(o).group_by { |b| b[:file] }
  end

  warn "#{Commit}:#{commit.id} elements extraction failed" if blocks === false
  warn "#{Commit}:#{commit.id} no elements extracted" if !blocks || blocks.empty?
  warn "#{Commit}:#{commit.id} some elements not extracted" if blocks && blocks.size < files.size

  next if blocks.blank? || blocks.size < files.size

  files.each do |f|
    k = f[:path]

    # NOTE: select only top level Java type declarations in case of unit node extraction

    blocks[k].select! { |b| b[:path] !~ /\// }

    if blocks[k].empty?
      warn "#{Commit}:#{commit.id} no elements in #{f[:path]}"
      next
    end

    blocks[k].each do |b|
      if b[:path] == '!'
        warn "#{Commit}:#{commit.id} problematic element in #{f[:path]}"
        next
      end

      element = persist(Element, commit: commit, file: f[:path], path: b[:path]) do |r|
        r.offset = b[:offset]
        r.length = b[:length]
        r.line = b[:line]
      end

      dump_record element, :element, 2
    end
  end
end
