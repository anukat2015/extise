#!/usr/bin/env ruby
require_relative 'common' and load_extise!

include Extisimo

p, u, m, r = false, 'now', nil, []
c, s, t, v, q = true, false, 80, true, false

ARGV.bind_and_parse! to: :locals do
  use "[<options>] #{to_arg Metric::TARGETS} [<metric>...]"
  opt 'p    --progress'
  opt 'u    --until=<time:Time>'
  opt 'c -c --[no-]color'
  opt 's -s --[no-]sort'
  opt 't -t --trim[=<length:Integer>]'
  opt 'v -v --[no-]verbose'
  opt 'q -q --quiet'
  arg "m #{to_arg Metric::TARGETS}", &included_in(Metric::TARGETS)
  arg 'r [<metric>...]'
end

u = Time.now if u == 'now'
v, q = false, true if p

AutoColor.disable on: self unless c

metrics = Metric.on(m)
metrics = metrics.where(name: r) unless r.blank?
metrics = Hash[metrics.map { |metric| [metric, (load(metric.path) and metric.type.constantize.new)] }]

subjects = case m.to_sym
when :concept
  Concept.left_joins conceptualities: [element: [commit: [repository: [project: :tasks]]]]
when :element
  Element.left_joins commit: [repository: [project: :tasks]]
when :session
  Session.left_joins interactions: [attachment: :task]
end

# NOTE: measure on subjects related to tasks submitted prior to the desired time

inform "fetch subjects through tasks submitted until #{options.assigned?(:u) ? u : 'now'}" if v unless q

subjects = subjects.where("#{Task.table_name}.submitted_at <= ?", u).order(created_at: :asc).distinct

# NOTE: measure on all users associated with a concept via element's commit, such users may not have assigned tasks
# NOTE: measure on all users who worked on elements with same node path, such users may not have assigned tasks
# NOTE: measure on the session associated user only, such user has assigned at least one task

users_fetcher = case m.to_sym
when :concept
  -> (concept) { User.joins(commits: [elements: [conceptualities: :concept]]).where("#{Concept.table_name}.id = ?", concept.id).distinct }
when :element
  -> (element) { User.joins(commits: :elements).where("#{Element.table_name}.path = ?", element.path).distinct }
when :sesssion
  -> (session) { [session.user] }
end

process subjects, progress: p do |subject|
  inform "fetch users for #{m}:#{subject.id} who somehow relate" if v unless q

  users = users_fetcher.call subject

  users.each do |user|
    metrics.each do |metric, handler|
      inform "measure on #{m}:#{subject.id} for #{user.name} with #{metric.name}" if v unless q

      begin
        data = handler.measure user, subject
      rescue
        warn "#{Metric}:#{metric.id} #{$!.message || 'unknown failure'}"
        next
      end

      expertise = persist(Expertise, metric: metric, subject: subject, user: user) do |r|
        r.metric_data = data
        r.value = data.delete :value
      end

      dump_record expertise, :expertise
    end
  end
end
